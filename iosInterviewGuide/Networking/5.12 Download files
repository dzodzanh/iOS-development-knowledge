1. How to download files on iOS
  - Step 1: Get the data
    + Use URLSession's NSURLSessionDataTask or
    + Alamofire
  - Handle the data from get request. There are 3 ways:
    + Work with data right after we recieved it (in-memory):
        . can work best with small size files.
        . if the file is too big, it could take time to donwload
    + Store file in temporary folder: 
        . Help postpone handle the file until the file is completly downloaded
        . Files are kept in temp folder only when app running
    + Store file on disk:
        . Allow access it later
        . The only wat to download too big files

2. Example NSURLSession 
    class Downloader {
        // In-memory
        class func load(url: URL, completion: @escaping (Data?) -> Void) {
            let session = URLSession(configuration: .default)
            var request = URLRequest(url: url)
            request.httpMethod = "GET"
            let task = session.dataTask(with: request) { (data, response, error) in
                if error == nil {
                    let statusCode = (response as? HTTPURLResponse)?.statusCode
                    // Do something with data
                    completion(data)
                } else {
                    print("Failure \(error?.localizedDescription ?? "")")
                }
            }
            task.resume()
        }
        
        // Save from tmp to disk (document)
        class func load(url: URL, to localUrl: URL, completion: @escaping () -> Void) {
            let session = URLSession(configuration: .default)
            var request = URLRequest(url: url)
            request.httpMethod = "GET"

            let task = session.downloadTask(with: request) { tmpLocalUrl, response, error in
                if let tmpLocalUrl = tmpLocalUrl, error == nil {
                    if let statusCode = (response as? HTTPURLResponse)?.statusCode {
                        print(statusCode)
                    }

                    do {
                        try FileManager.default.copyItem(at: tmpLocalUrl, to: localUrl)
                        completion()
                    } catch (let error) {
                        print("Error writing file \(localUrl): \(error.localizedDescription)")
                    }
                } else {
                    print("Error writing file \(localUrl): \(error?.localizedDescription ?? "")")
                }
            }
            task.resume()
        }
    }
    
    func downloadImage_InMemory_NSURLSession() {
        guard let url = URL(string: "https://upload.wikimedia.org/wikipedia/commons/1/15/Red_Apple.jpg") else { return }
        Downloader.load(url: url) { data in
            if let data = data, let image = UIImage(data: data) {
                DispatchQueue.main.async {
                    self.imageView.image = image
                }
            }
        }
    }
    
    func downloadImage_toDisk_NSURLSession() {
        guard let url = URL(string: "https://upload.wikimedia.org/wikipedia/commons/1/15/Red_Apple.jpg") else { return }
        if var documentsURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {
            documentsURL.append(path: "test.jpg")
            print(documentsURL)
            Downloader.load(url: url, to: documentsURL) {
                print("Download completed")
            }
        }
    }
    
3. Example Alamofire
  // temporaryURL
  Alamofire.download(url).responseData { response in
      print("Temporary URL: \(response.temporaryURL)")
  }
  
  // To disk
  class func alamofireLoad(url: URL) {
      guard let fileURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first?
                                    .appendingPathComponent(url.lastPathComponent) else { return }
      let destination: DownloadRequest.Destination = { _, _ in
          return (destinationURL: fileURL, options: [.removePreviousFile])
      }
      AF.download(url, to: destination).response { responseData in
          switch responseData.result {
          case .success(let url):
              guard let url = url else { return }
              print(url)
          case .failure(let error):
              print(error)
          }
      }
  }
